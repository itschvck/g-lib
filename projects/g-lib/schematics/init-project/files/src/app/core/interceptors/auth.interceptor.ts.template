import { HttpErrorResponse, HttpEvent, HttpHandlerFn, HttpRequest } from "@angular/common/http";
import { catchError, Observable, throwError } from "rxjs";
import { environment } from "../../../environments/environment.development";

export const authInterceptor = (req: HttpRequest<any>, next: HttpHandlerFn): Observable<HttpEvent<any>> => {
  // declare the endpoints to exclude
  const excludeEndpoints: string[] = [
    './assets'
  ];

  // fn that checks the request if it is to exclude
  const checkEndpointValidity = (requestEndpoint: string): boolean => {
    const positionIndicator = environment.urlApi;
    const position = requestEndpoint.indexOf(positionIndicator);
    if (position === -1) {
      return false;
    }
    if (position >= 0) {
      const destination: string = requestEndpoint.substring(position + positionIndicator.length);
      for (const endpoint of excludeEndpoints) {
        if (new RegExp((endpoint)).test(destination)) {
          return false;
        }
      }
    }
    return true;
  }

  if (!checkEndpointValidity(req.url)) {
    return next(req);
  }

  const requestWithCredentials: HttpRequest<any> = req.clone({ withCredentials: true });

  return next(requestWithCredentials).pipe(
    catchError((e: HttpErrorResponse) => {
      if (e.status === 401) {
        //execute token expired
      }
      return throwError(() => e);
    })
  );
}
