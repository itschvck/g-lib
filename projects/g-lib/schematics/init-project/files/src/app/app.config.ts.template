import { ApplicationConfig, provideAppInitializer, provideZoneChangeDetection } from '@angular/core';
import { provideRouter, withComponentInputBinding, withHashLocation, withInMemoryScrolling } from '@angular/router';
import { routes } from './app.routes';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { provideHttpClient, withFetch, withInterceptors } from "@angular/common/http";
import { authInterceptor } from "./core/interceptors/auth.interceptor";
import { errorInterceptor } from "./core/interceptors/error.interceptor";
import { initFn } from "./core/factory/fn/init.fn";
<% if (store === 'normal') { %>
import { AppState } from "./core/app/redux/state/app.state";
import { appReducers } from "./core/app/redux/app.reducers";
import { appEffects } from "./core/app/redux/app.effects";
import { provideStore } from "@ngrx/store";
import { provideEffects } from "@ngrx/effects";
import { provideStoreDevtools } from "@ngrx/store-devtools";
<% } %>

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes, withInMemoryScrolling({ anchorScrolling: 'enabled' }), withHashLocation(), withComponentInputBinding()),
    provideAnimationsAsync(),
    provideAppInitializer(initFn),
    provideHttpClient(withInterceptors([authInterceptor, errorInterceptor]), withFetch()),
    <% if (store === 'normal') { %>
    provideStore<AppState>(appReducers),
    provideEffects(appEffects),
    provideStoreDevtools({ maxAge: 25, logOnly: true, autoPause: true, trace: true, traceLimit: 75 }),
    <% } %>
  ]
};
